---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';

import Header from '../components/Header.astro';
const { title } = Astro.props

//microCMS呼び出し
import { getBlogs } from "../library/microcms";
const { contents: posts } = await getBlogs({ fields: ["id", "title", "publishedAt"] });

---

<Header title={title}/>
<Layout title="Welcome to Astro.">
	<main>
		<h1>Welcome to 追加01 2回目<span class="text-gradient">Astro</span></h1>
		<p class="instructions">
			To get started, open the directory <code>src/pages</code> in your project.<br />
			<strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
		</p>
    <a href="./about">about</a>
    <p>blog</p>
    <ul>
      {
        posts.map((post) => (
          <li>
            <time datetime={post.publishedAt}>
              {new Date(post.publishedAt).toLocaleDateString('ja-JP')}
            </time>
            <a href={`/blog/${post.id}`}>{post.title}</a>
          </li>
        ))
      }
    </ul>
    <img src="/favicon.svg" />

    <script>
    var x = 0;
    ++x;
    console.log(x); // これは1

    var c = document.createElement('canvas');
    var ctx = c.getContext('2d');
    var cw = c.width = 400;
    var ch = c.height = 58;
    document.body.appendChild(c);

    ctx.font = 'normal 16px monospace';
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    ctx.fillStyle = '#fff';
    ctx.strokeStyle = 'rgba(0, 0, 0, .3)';
    ctx.shadowColor = '#3f3';
    var page=0;

      // ... multiple messages... //
      var messagesArray= new Array(
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "Wake up, Neo...",
        "The Matrix has you",
        "Follow the white rabbit.",
        "Knock, knock, Neo.",
        "██████████████████████████████████",
        "Original Idea: ",
        "modified by VSDigital "
      );

      // ...cursor style... //
      var cursor = new Array(
        "",
        "█",
        "",
        "█",
        "",
        "█",
        "",
        "█",
        "_",
        "",
        "\n",
        "█",
        "*Jack Rugile*",
        "█"
        
      );



    var messageArray = messagesArray[page].split('');
    var totalMessages = messagesArray.length-1;
    var messageLength = messageArray.length;
    var pointer = 0;
    var typeTick = 0;
    var typeTickMax = 0;

    var minTick=5;
    var maxTick=10;
    var typeResetTick = 0;
    var typeResetMax = 15;
    
    var updateTypeTick = function(){
      

      if(pointer < messageLength){
        if(typeTick < typeTickMax){
          typeTick++;
        } else {
          typeTick = 0;
          pointer++; 
          typeTickMax= Math.floor((Math.random()*maxTick)+minTick);;

        }
      } else {
        if(typeResetTick < typeResetMax){
          typeResetTick++;
        } else { 
          typeResetTick = 0;
          typeTick = 0;
          pointer = 0;
        
          // ...change message... //      
          if(page<totalMessages)page++;
          else page=0;
          
          messageArray=messagesArray[page].split('');
          messageLength = messageArray.length;
    
        }
      }
    }

    var renderMessage = function(){
    
    var text;
      
      switch(cursor[page])
      {
          
        case "\n":   // ... NO ANIMATION
          text= messageArray.slice(0, messageLength);
          break;
          
          
        default:
          text= messageArray.slice(0, pointer);
          text[pointer]=cursor[page];
          break;
          
          
      }
      
      
    
      ctx.shadowBlur = 9;
      ctx.fillText(text.join(''), 20, 20);
      ctx.shadowBlur = 0;
      
      }
        
    var renderLines = function(){
      ctx.beginPath();
      for(var i = 0; i < ch/2; i += 1){    
        ctx.moveTo(0, (i*2) + .5);
        ctx.lineTo(cw, (i*2) + .5);    
      } 
      ctx.stroke();
    }

    var loop = function(){
      ctx.clearRect(0, 0, cw, ch);
      updateTypeTick();
      renderMessage();
      renderLines();
      setTimeout(loop, 2);
    }
        
    loop();
    </script>

    

		<ul role="list" class="link-card-grid">
			<Card
				href="https://docs.astro.build/"
				title="Documentation"
				body="Learn how Astro works and explore the official API docs."
			/>
			<Card
				href="https://astro.build/integrations/"
				title="Integrations"
				body="Supercharge your project with new frameworks and libraries."
			/>
			<Card
				href="https://astro.build/themes/"
				title="Themes"
				body="Explore a galaxy of community-built starter themes."
			/>
			<Card
				href="https://astro.build/chat/"
				title="Community"
				body="Come say hi to our amazing Discord community. ❤️"
			/>
		</ul>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
  canvas {
  background: #101010;
  box-shadow: 0 0 0 2px #191919;
  display: block;
  left: 50%;
  margin: -100px 0 0 -200px;
  position: absolute;
  top: 50%;
} 
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>